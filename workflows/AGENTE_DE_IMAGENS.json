{
  "name": "üî¥ [YT] Agente IA Envio de Midias",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -660,
        820
      ],
      "id": "73f5aba8-a2a5-4ce2-8c76-119ad3723e19",
      "name": "When chat message received",
      "webhookId": "6e6aaa0e-ff2d-40fb-af99-8b09d26c2ca6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -480,
        1060
      ],
      "id": "c2bd9f3f-ef13-4f3c-b87c-6883113cd6ba",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "rAmZWZ8Si1gjbSYP",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -320,
        1060
      ],
      "id": "7e468b19-53eb-4f48-96ff-7460d311d310",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.output;\n\n// Converte \\n literal para quebras reais\nconst normalizedText = text.replace(/\\\\n/g, '\\n');\n\n// Quebra em partes baseadas em \\n\\n\nconst parts = normalizedText.split(/\\n{2,}/);\n\nconst results = [];\n\nfor (const part of parts) {\n  let cleanedPart = part;\n\n  // Regex atualizado: pega qualquer link markdown vindo de https://s3, com qualquer extens√£o\n  const markdownRegex = /!?\\[.*?\\]\\((https:\\/\\/s3[^\\)]+)\\)/g;\n  const links = [];\n\n  let match;\n  while ((match = markdownRegex.exec(part)) !== null) {\n    links.push(match[1]); // extrai a URL pura\n  }\n\n  // Remove os markdowns do texto original\n  cleanedPart = cleanedPart.replace(markdownRegex, '').trim();\n\n  // Adiciona o texto limpo como item, se ainda tiver conte√∫do\n  if (cleanedPart) {\n    results.push({ json: { output: cleanedPart } });\n  }\n\n  // Adiciona os links como itens separados\n  for (const link of links) {\n    results.push({ json: { output: link } });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        820
      ],
      "id": "e366faef-3b0e-4265-a462-3a7f3f53a949",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        280,
        820
      ],
      "id": "fbab384f-dc94-47b2-8061-12be4dcccdbe",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ /^https:\\/\\/s3.*\\.(webp|png|jpg|jpeg)$/.test($json.output) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "282b9093-f74c-4418-8be6-e35d3d261daf"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2db4e960-b26d-4152-891c-6af592fac38f",
                    "leftValue": "={{ /^https:\\/\\/s3.*\\.(mp4)$/.test($json.output) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b55de14-865d-454b-8129-b360e595c9b8",
                    "leftValue": "={{ /^https:\\/\\/s3.*\\.(pdf)$/.test($json.output) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c44e797f-7957-4fd6-acde-7b093ddd72a8",
                    "leftValue": "={{ /^https:\\/\\/s3.*\\.(mp3)$/.test($json.output) }}",
                    "rightValue": "√Åudio",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        600,
        820
      ],
      "id": "d24a3038-0ce3-47fa-acdc-8e7ecee5378d",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Obt√©m a vari√°vel de entrada\nconst inputText = $input.first().json.output;\n\n// Verifica se a entrada √© v√°lida\nif (typeof inputText !== 'string') {\n    throw new Error('A entrada $input.first().json.message deve ser uma string.');\n}\n\n// Conta o n√∫mero de caracteres\nconst charCount = inputText.length;\n\n// Calcula o delay baseado em blocos de 40 caracteres\nconst result = Math.floor(charCount / 30) * 1000;\n\n// Retorna os valores\nreturn {\n    characterCount: charCount,\n    delay: result,\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        1000
      ],
      "id": "8b4d452a-82df-40bb-bf2e-e66cb6869b31",
      "name": "Delay1"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1980,
        1020
      ],
      "id": "c47c1e75-bf72-4643-8bde-854375f88cd7",
      "name": "Wait",
      "webhookId": "026afa88-b9fc-4985-bfca-57801c6fc9a4"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Identidade\nVoc√™ envia provas socais\n\n## Formata√ß√£o de Respostas\n\nNunca utilize formata√ß√£o Markdown em nenhuma mensagem.\nTodos os textos devem ser enviados em formato simples, sem asteriscos, sublinhados, hashtags, emojis especiais, ou qualquer outro caractere de formata√ß√£o.\nLinks devem ser enviados como texto puro, sem aplicar formata√ß√£o de link clic√°vel.\nCaso precise enviar links, envie apenas o endere√ßo completo (ex: https://meusite.com/arquivo.pdf), sempre no formato de texto simples.\n\n## Provas socais\nPara enviar as prova soscias voc√™ deve enviar, exatamente o texto:\nhttps://s3.plasdigital.com.br/arquivoveterinaria/audio2.mp3\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -440,
        820
      ],
      "id": "28fb6fe2-d31a-410e-81f1-a5f72af214f1",
      "name": "Meu agente"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.plasdigital.com.br/message/sendMedia/agente",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "xxxxxxxxxxxxxxxxx"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=5521998105076"
            },
            {
              "name": "mediatype",
              "value": "document"
            },
            {
              "name": "mimetype",
              "value": "document/pdf"
            },
            {
              "name": "media",
              "value": "={{ $json.output }}"
            },
            {
              "name": "fileName",
              "value": "document.pdf"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1460,
        980
      ],
      "id": "3932f65a-3e41-46fe-8c03-d0f318dd003a",
      "name": "PDF",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tiPBWQbcYjyqu7UZ",
          "name": "Key Global Evolution"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.plasdigital.com.br/message/sendMedia/agente",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "xxxxxxxxxxxxx"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=5521998105076"
            },
            {
              "name": "mediatype",
              "value": "video"
            },
            {
              "name": "mimetype",
              "value": "video/mp4"
            },
            {
              "name": "media",
              "value": "={{ $json.output }}"
            },
            {
              "name": "fileName",
              "value": "video.mp4"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1620,
        900
      ],
      "id": "de64e0ea-8128-4401-b8c7-b5740f0bdf2a",
      "name": "Video",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tiPBWQbcYjyqu7UZ",
          "name": "Key Global Evolution"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.plasdigital.com.br/message/sendMedia/agente",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "xxxxxxxxxxxxx"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=5521998105076"
            },
            {
              "name": "mediatype",
              "value": "image"
            },
            {
              "name": "mimetype",
              "value": "image/png"
            },
            {
              "name": "media",
              "value": "={{ $json.output }}"
            },
            {
              "name": "fileName",
              "value": "imagem.png"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1800,
        820
      ],
      "id": "184597bb-4637-44a9-9ceb-036003d8976c",
      "name": "Image",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tiPBWQbcYjyqu7UZ",
          "name": "Key Global Evolution"
        }
      }
    },
    {
      "parameters": {
        "content": "1. Pega as mensagens gerar pelo agente\n2. Faz uma quebra usando '\\n\\n' como delimitador\n3. Limpa o markdown e separa a URL do texto\n4. Retorna cada parte do split como um item separado",
        "height": 320,
        "width": 260,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        640
      ],
      "typeVersion": 1,
      "id": "b33734b5-ced6-4362-8d09-0d0b5ff7a164",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "content": "1. Pega as mensagens e conta o n√∫mero de caracteres\n2. Divide o n√∫mero de caracteres por 15, arredonda para o n√∫mero inteiro mais pr√≥ximo e multiplica por 1000\n3. Isso gera o delay \"digitando\", que ser√° utilizado no node \"Send Text\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "height": 520,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        680
      ],
      "typeVersion": 1,
      "id": "707d0a84-4b00-4eab-a93d-e9fbca3e4f84",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "content": "Envia a mensagem, com delay \"digitando\", gerado pelo node anterior",
        "height": 420,
        "width": 220,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1180,
        780
      ],
      "typeVersion": 1,
      "id": "9362125d-593b-437d-a3a1-1916be3cd951",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "content": "1. Pega os itens (Mensagens) do node anterior e passa uma menssagem por vez, para enviar as mensagens picadas",
        "height": 300,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        220,
        660
      ],
      "typeVersion": 1,
      "id": "0dc0643d-b0f8-4a11-8191-b6401c209c25",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo.plasdigital.com.br/message/sendText/agente",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "xxxxxxxxxxx"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=5521998105076"
            },
            {
              "name": "text",
              "value": "={{ $('Switch').item.json.output }}"
            },
            {
              "name": "delay",
              "value": "={{ $json.delay }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1220,
        1000
      ],
      "id": "9da42916-cc01-4781-a47a-bcc5974448d9",
      "name": "Text",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tiPBWQbcYjyqu7UZ",
          "name": "Key Global Evolution"
        }
      }
    },
    {
      "parameters": {
        "content": "1. Verifica o tipo de mensagem",
        "height": 360,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        540,
        660
      ],
      "typeVersion": 1,
      "id": "53a879bb-a2b3-4590-bef7-0563efc41824",
      "name": "Sticky Note26"
    },
    {
      "parameters": {
        "content": "Envia as m√≠dias",
        "height": 400,
        "width": 500,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1420,
        800
      ],
      "typeVersion": 1,
      "id": "a23dc569-a35a-483e-9975-0ab9863a8ed3",
      "name": "Sticky Note27"
    },
    {
      "parameters": {
        "content": "# Como fazer seu agente IA enviar Imagens, V√≠deos, √Åudio, Documentos e Mensagens Fracionadas!\n\nPara que seu agente consiga **enviar m√≠dias como imagens, v√≠deos, √°udios e documentos de forma autom√°tica**, voc√™ precisa seguir alguns passos essenciais:\n\n## 1. Armazene as m√≠dias em um banco com URL p√∫blica\n- Antes de qualquer coisa, **os arquivos precisam estar dispon√≠veis via URL**, ou seja, acess√≠veis por link.  \nA forma mais pr√°tica de fazer isso √© usando o **Minio**, que √© um servidor de armazenamento compat√≠vel com o padr√£o S3 (igual da Amazon).\n\n**Exemplo de link gerado pelo Minio:**  \n`https://s3.meuservidor.com.br/bucket/arquivo.jpg`\n\n---\n## 2. Entenda que cada tipo de mensagem precisa de um node diferente\n\nO N8N trata **mensagens de texto, imagens, v√≠deos e documentos** com **nodes diferentes**.  \nSe voc√™ tentar enviar um link como se fosse texto, ele n√£o vai entender que √© uma imagem ou v√≠deo ‚Äî ele apenas **vai mostrar o link como texto comum**.",
        "height": 500,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        40
      ],
      "typeVersion": 1,
      "id": "acbe237d-6a46-4664-95ac-2edc5b25b13b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "![Source example](https://s3.plasdigital.com.br/youtube/agente_multimida.jpg#full-width)\n### Pedro Almeida | Automa√ß√µes e IA\nAcesse meus Links:\n- **Instagram:** [Clique aqui](https://www.instagram.com/pedrolucasalmeida/)\n- **Site:** [Clique aqui](https://pedrolucasalmeida.com.br/)\n- Youtube: [Clique aqui](https://pedrolucasalmeida.com.br/)",
        "height": 487,
        "width": 568,
        "color": 7
      },
      "id": "4d3b9396-e249-411c-8e23-c24dd83775c1",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        560,
        40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evo.plasdigital.com.br/message/sendWhatsAppAudio/agente",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "5521998105076"
            },
            {
              "name": "audio",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        1080
      ],
      "id": "8f5339f2-04df-4891-8c95-e1a47abfe868",
      "name": "Send Audio",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tiPBWQbcYjyqu7UZ",
          "name": "Key Global Evolution"
        }
      }
    }
  ],
  "pinData": {
    "When chat message received": [
      {
        "json": {
          "sessionId": "9a1f20f946a143598c3e2614f5a439c4",
          "action": "sendMessage",
          "chatInput": "me envie as provas socias"
        }
      }
    ],
    "Wait": [
      {
        "json": {
          "key": {
            "remoteJid": "5521998105076@s.whatsapp.net",
            "fromMe": true,
            "id": "3EB00364BAB9C671CF0FCA92B062812E17BB02AC"
          },
          "pushName": "",
          "status": "PENDING",
          "message": {
            "imageMessage": {
              "url": "https://mmg.whatsapp.net/o1/v/t24/f2/m231/AQNjZ_a6A7MuX2pJUkszYVYdStA9n3zI9RrdvbFVgw52hRe39KAWud-jCYskq_AT7q6eLRPUp8Yx1LbxVR5YqE2ZzWkJ3N1-1cw23x1KGQ?ccb=9-4&oh=01_Q5Aa1wH0KT_RwrznNie-KALJynSWji_W8NjKMBld67xx8Ny5xw&oe=68812C80&_nc_sid=e6ed6c&mms3=true",
              "mimetype": "image/png",
              "fileSha256": "KYlGzU1+vkIrCEehDt/EzAIOKr72cmkjFR+WlWZAPHA=",
              "fileLength": "99953",
              "height": 470,
              "width": 542,
              "mediaKey": "BxRK3QO1sNKxWFE05hAn0ZQegEMHA4oKNBLHlLw1C7g=",
              "fileEncSha256": "zg3PiIAQZLRQKzlSn76Urzz/z648+w/eIPZV/r0oW/E=",
              "directPath": "/o1/v/t24/f2/m231/AQNjZ_a6A7MuX2pJUkszYVYdStA9n3zI9RrdvbFVgw52hRe39KAWud-jCYskq_AT7q6eLRPUp8Yx1LbxVR5YqE2ZzWkJ3N1-1cw23x1KGQ?ccb=9-4&oh=01_Q5Aa1wH0KT_RwrznNie-KALJynSWji_W8NjKMBld67xx8Ny5xw&oe=68812C80&_nc_sid=e6ed6c",
              "mediaKeyTimestamp": "1750714145",
              "jpegThumbnail": "/9j/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkzODdASFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCAAcACADASIAAhEBAxEB/8QAGAAAAwEBAAAAAAAAAAAAAAAAAAECAwb/xAAmEAACAQMCBQUBAAAAAAAAAAABAgADERIhcQQTMWGRQVFSYoGx/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAH/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwDsKHDGhX4ln4qu4rVMwpOiaWsO03Soqm+dRr/IRVQuWrWJ0AxJ/kkKmQJe4H1MDfnp38QDA2IJMlOV0Ck7qZWwA2gZuoLgkftwIKqqdKYN/dhpKNNXNze8eK9MF8QBWHQIF2IjixX0RQewjkV//9k=",
              "contextInfo": {}
            }
          },
          "contextInfo": {},
          "messageType": "imageMessage",
          "messageTimestamp": 1750714146,
          "instanceId": "bb0bf298-b854-4d70-af3a-46ffe51ebac4",
          "source": "unknown"
        }
      }
    ]
  },
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Meu agente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Meu agente",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "Meu agente",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delay1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delay1": {
      "main": [
        [
          {
            "node": "Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Meu agente": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Audio": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e8eaeac3-bfce-4424-9bb9-cad9df9d2bdb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "088b65303544e7ef42f1475871565ca9dada40119b694ef560ffef565b70f9d3"
  },
  "id": "YJUzArqe1kPdFxTu",
  "tags": []
}